{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoSMS from \"./ExpoSMS\";\nexport function sendSMSAsync(addresses, message) {\n  var finalAddresses;\n  return _regeneratorRuntime.async(function sendSMSAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          finalAddresses = Array.isArray(addresses) ? addresses : [addresses];\n\n          if (ExpoSMS.sendSMSAsync) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-sms', 'sendSMSAsync');\n\n        case 3:\n          return _context.abrupt(\"return\", ExpoSMS.sendSMSAsync(finalAddresses, message));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", ExpoSMS.isAvailableAsync());\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/SMS.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,OAAP;AAKA,OAAO,SAAe,YAAf,CACL,SADK,EAEL,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,UAAA,cAJD,GAIkB,KAAK,CAAC,OAAN,CAAc,SAAd,IAA2B,SAA3B,GAAuC,CAAC,SAAD,CAJzD;;AAAA,cAKA,OAAO,CAAC,YALR;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,cAApC,CANH;;AAAA;AAAA,2CAQE,OAAO,CAAC,YAAR,CAAqB,cAArB,EAAqC,OAArC,CARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAAe,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,4CACE,OAAO,CAAC,gBAAR,EADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoSMS from './ExpoSMS';\nimport { SMSResponse } from './SMS.types';\n\nexport { SMSResponse };\n\nexport async function sendSMSAsync(\n  addresses: string | string[],\n  message: string\n): Promise<SMSResponse> {\n  const finalAddresses = Array.isArray(addresses) ? addresses : [addresses];\n  if (!ExpoSMS.sendSMSAsync) {\n    throw new UnavailabilityError('expo-sms', 'sendSMSAsync');\n  }\n  return ExpoSMS.sendSMSAsync(finalAddresses, message);\n}\n\n/**\n * The device has a telephony radio with data communication support.\n * - Always returns `false` in the iOS simulator, and browser\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return ExpoSMS.isAvailableAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}